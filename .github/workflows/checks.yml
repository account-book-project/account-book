name: Code Quality Checks

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      my-db: …      # 그대로
      my-redis: …   # 그대로

    steps:
      - uses: actions/checkout@v3

      # 1) Create .env
      - name: Create .env
        run: |
          cat <<EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DJANGO_ENV=production
          DB_NAME=${{ secrets.PG_NAME }}
          DB_USER=${{ secrets.PG_USER }}
          DB_PASSWORD=${{ secrets.PG_PASSWORD }}
          DB_HOST=my-db
          DB_PORT=5432
          REDIS_HOST=my-redis
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
          EOF

      # 2) Build & Run (abort-on-exit)
      - name: Build and run
        run: docker compose up --build --abort-on-container-exit --exit-code-from my-django

      # 3) Tests, format, migrate 모두 my-django 컨테이너 내에서 실행
      - name: Run all checks inside container
        run: |
          docker compose exec my-django \
            bash -lc "isort . --check --diff && \
                       black . --check && \
                       python manage.py migrate && \
                       python manage.py test"

      # 4) Cleanup
      - name: Cleanup
        if: always()
        run: docker compose down --volumes --remove-orphans

      - name: Show logs on failure
        if: failure()
        run: docker compose logs my-django

