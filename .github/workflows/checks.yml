name: Code Quality Checks

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      my-db:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_NAME }}
        options: >-
          --health-cmd "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      my-redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug workspace
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          pwd
          ls -al
          echo "--- Recursive listing ---"
          ls -R .

      - name: Create .env
        run: |
          cat <<EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DJANGO_ENV=production
          DB_NAME=${{ secrets.PG_NAME }}
          DB_USER=${{ secrets.PG_USER }}
          DB_PASSWORD=${{ secrets.PG_PASSWORD }}
          DB_HOST=my-db
          DB_PORT=5432
          REDIS_HOST=my-redis
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
          EOF

      - name: Build and start containers
        run: docker compose -f docker-compose.yml up -d --build

      - name: Validate Compose configuration
        run: docker compose -f docker-compose.yml config

      - name: Mark /app as safe Git directory
        run: docker compose exec my-django git config --global --add safe.directory /app

      - name: Run isort
        run: docker compose run --rm my-django isort . --check --diff

      - name: Run black
        run: docker compose run --rm my-django black . --check

      - name: Apply migrations
        run: docker compose run --rm my-django python manage.py migrate

      - name: Run tests
        run: docker compose run --rm my-django python manage.py test

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans

      - name: Show logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml logs my-django

