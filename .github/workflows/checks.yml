name: Code Quality Checks

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      my-db:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_NAME }}
        options: >-
          --health-cmd "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      my-redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env
        run: |
          cat <<EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DJANGO_ENV=production
          DB_NAME=${{ secrets.PG_NAME }}
          DB_USER=${{ secrets.PG_USER }}
          DB_PASSWORD=${{ secrets.PG_PASSWORD }}
          DB_HOST=my-db
          DB_PORT=5432
          REDIS_HOST=my-redis
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}
          EOF

      - name: Build & start containers
        run: docker compose up -d --build

      - name: Wait for services to be healthy
        run: |
          sleep 15
          docker compose ps

      - name: Check code formatting with isort
        run: docker compose exec -T my-django isort . --check --diff

      - name: Check code formatting with black
        run: docker compose exec -T my-django black . --check

      - name: Apply migrations
        run: docker compose exec -T my-django python manage.py migrate --noinput

      - name: Run tests
        run: docker compose exec -T my-django python manage.py test

      - name: Cleanup containers
        if: always()
        run: docker compose down --volumes --remove-orphans


